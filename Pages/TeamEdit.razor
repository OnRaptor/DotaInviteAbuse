@using DotaInviteAbuse.Services
@using SteamKit2.GC;
@using SteamKit2.GC.Dota.Internal;
@inject DotaTeamService teamService
@inject DotaClient dota
@inject ISnackbar Snackbar

<MudStack Class="d-flex justify-space-between mt-5">
	<MudPaper Class="pa-5 rounded-5" Elevation="0">
		<MudStack Spacing="5">
			<MudSelect @bind-Value="selectedTeam" T="TeamInfo" Label="Select Team to edit" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
				@foreach (var team in Teams)
				{
					<MudSelectItem Value="@team">@team.Name</MudSelectItem>
				}
			</MudSelect>
			<MudTextField Immediate="true" @bind-Value="@NewName" Label="New team name" />
			<MudButton OnClick="Apply" Disabled="@(string.IsNullOrWhiteSpace(NewName) || selectedTeam == null)" Variant="Variant.Outlined">
				Apply
			</MudButton>
		</MudStack>
	</MudPaper>

	<MudPaper Class="pa-5 rounded-5" Elevation="0">
		<MudStack Spacing="5">
			<MudText Typo="Typo.body1">
				Creating new team
			</MudText>
			<MudTextField Immediate="true" @bind-Value="@NewTeamName" Label="Team name" />
			<MudButton OnClick="CreateTeam" Variant="Variant.Outlined">
				Create
			</MudButton>
		</MudStack>
	</MudPaper>
</MudStack>

@code {
	public List<TeamInfo> Teams = new List<TeamInfo>();
	public TeamInfo selectedTeam;
	public string NewName { get; set; }
	public string NewTeamName { get; set; }

	protected override void OnInitialized()
	{
		teamService.teamInfo += OnTeamInfo;
		teamService.teamEdited += OnTeamEdit;
		teamService.teamCreated += OnTeamCreate;
		if (dota.IsLoaded)
			teamService.LoadTeams();
		else
			dota.DotaLoaded += () => teamService.LoadTeams();
	}

	private void OnTeamInfo(ClientGCMsgProtobuf<CMsgDOTATeamsInfo> response)
	{
		Teams = response.Body.teams.Select(s => new TeamInfo { Name = s.name, Id = s.team_id }).ToList();
		selectedTeam = null;
	}

	private void OnTeamEdit(ClientGCMsgProtobuf<CMsgDOTAEditTeamDetailsResponse> response)
	{
		if (response.Body.result == CMsgDOTAEditTeamDetailsResponse.Result.SUCCESS)
		{
			teamService.LoadTeams();
			Snackbar.Add("Team Name Changed!", Severity.Success);
		}
	}

	private void OnTeamCreate(ClientGCMsgProtobuf<CMsgDOTACreateTeamResponse> response)
	{
		teamService.LoadTeams();
	}

	public void Apply()
	{
		teamService.ChangeName(NewName, selectedTeam.Id);
	}

	public void CreateTeam()
	{
		teamService.CreateTeam(NewTeamName);
	}

	public class TeamInfo
	{
		public string Name { get; set; }
		public uint Id { get; set; }
	}
}