@using DotaInviteAbuse.Services
@using SteamKit2.GC;
@using SteamKit2.GC.Dota.Internal;
@inject DotaTeamService teamService
@inject DotaClient dota
@inject ISnackbar Snackbar

<MudPaper Class="pa-5 rounded-0" Elevation="0">
	<MudStack Spacing="5">
		<MudSelect @bind-Value="selectedTeam" T="TeamInfo" Label="Select Team to invite from" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
			@foreach (var team in Teams)
			{
				<MudSelectItem Value="@team">@team.Name</MudSelectItem>
			}
		</MudSelect>
		<MudTextField Immediate="true" @bind-Value="@NewName" Label="New team name" />
		<MudButton OnClick="Apply" Disabled="@(string.IsNullOrWhiteSpace(NewName) || selectedTeam == null)" Variant="Variant.Outlined">
			Apply
		</MudButton>
	</MudStack>
</MudPaper>

@code {
	public List<TeamInfo> Teams = new List<TeamInfo>();
	public TeamInfo selectedTeam;
	public string NewName { get; set; }

	protected override void OnInitialized()
	{
		teamService.teamInfo += OnTeamInfo;
		teamService.teamEdited += OnTeamEdit;
		if (dota.IsLoaded)
			teamService.LoadTeams();
		else
			dota.DotaLoaded += () => teamService.LoadTeams();
	}

	private void OnTeamInfo(ClientGCMsgProtobuf<CMsgDOTATeamsInfo> response)
	{
		Teams = response.Body.teams.Select(s => new TeamInfo { Name = s.name, Id = s.team_id }).ToList();
		selectedTeam = null;
	}

	private void OnTeamEdit(ClientGCMsgProtobuf<CMsgDOTAEditTeamDetailsResponse> response)
	{
		if (response.Body.result == CMsgDOTAEditTeamDetailsResponse.Result.SUCCESS)
		{
			teamService.LoadTeams();
			Snackbar.Add("Team Name Changed!", Severity.Success);
		}
	}


	public void Apply()
	{
		teamService.ChangeName(NewName, selectedTeam.Id);
	}

	public class TeamInfo
	{
		public string Name { get; set; }
		public uint Id { get; set; }
	}
}